@page "/products-monitor"

@using System.ComponentModel
@using Blorc.Components
@using Blorc.PatternFly.Components.Button
@using Blorc.PatternFly.Components.Spinner
@using Blorc.PatternFly.Components.EmptyState
@using Blorc.PatternFly.Components.Label
@using Blorc.PatternFly.Components.Table
@using Blorc.PatternFly.Components.Text
@using Blorc.PatternFly.Components.TextInput
@using Blorc.PatternFly.Components.Title
@using Blorc.PatternFly.Layouts.Split
@using Blorc.PatternFly.Layouts.Stack
@using Blorc.PatternFly.Core

@inherits ProductsComponent


<TextContent>
    <Text Component="h1">Products Monitor</Text>
    <Text Component="blockquote">Watch the availability of specifics products</Text>
</TextContent>
<br />

<div class="pf-c-form__group">
    <label class="pf-c-form__label" for="vertical-align-labels-vertical-form-name">    
        <span class="pf-c-form__label-text">Product Link</span>    
        <span class="pf-c-form__label-required" aria-hidden="true">*</span>  
    </label>
    <Split IsGutter="true">
        <SplitItem IsFilled="true">
            <TextInput Label="Product Link" @bind-Value="Url" UpdateMode="@UpdateMode.Continuous"/>
        </SplitItem>
        <SplitItem>
            <Button Variant=@ButtonVariant.Primary OnClick=@(async (s, a) => await AddAsync())>Add</Button>
        </SplitItem>
    </Split>
</div>

    <br />

    <Stack IsGutter="true">
        <StackItem>
            <Table Caption="Products" IsStickyHeader="true" DataSource=@Products>
                <Header>
                    <Row>
                        <Column Label="Name" Key="Name" IsSortable="true" Idx="0" />
                        <Column Label="Price" Key="Price" IsSortable="true" Idx="1" />
                        <Column Label="Currency" Key="Currency" IsSortable="true" Idx="2" />
                        <Column Label="Store" Key="Store" IsSortable="true" Idx="3" />
                        <Column Label="Has Changed" Key="HasChanged" IsSortable="true" Idx="4" />
                        <Column Label="Is Available" Key="IsAvailable" IsSortable="true" Idx="5" />
                        <ActionColumn ActionColumnType=@ActionColumnType.GutterButtons Label="Actions" Key="Actions" Align="@Align.Center" Idx="6" ActionSource=@(record => GetActions(record)) />
                    </Row>
                </Header>
                <NoRowsContent>
                    @if (IsLoading)
                    {
                        <EmptyState Variant="EmptyStateVariant.Full">
                            <Spinner IsVisible="true" Size="@SpinnerSize.XLarge" />
                            <Title HeadingLevel="h5" Size="lg">
                                Loading
                            </Title>
                        </EmptyState>
                    }
                    else
                    {
                        <EmptyState Variant="EmptyStateVariant.Full">
                            <EmptyStateIcon Icon="Search" />
                            <Title HeadingLevel="h2" Size="lg">
                                No data
                            </Title>
                        </EmptyState>
                    }
                </NoRowsContent>
            </Table>
        </StackItem>
        <StackItem><Button Variant=@ButtonVariant.Secondary OnClick=@(async (s, a) => await RefreshAsync()) isBlock>Refresh</Button></StackItem>
    </Stack>




